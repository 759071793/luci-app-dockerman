<%#
 Copyright 2010 Jo-Philipp Wich <jow@openwrt.org>
 Licensed to the public under the Apache License 2.0.
-%>

<%+header%>

<script type="text/javascript">//<![CDATA[
	var bwxhr = new XHR();

	var G;
	var TIME = 0;
	var L01   = 1;
	var L05   = 2;
	var L15  = 3;

	var width  = 400;
	var height = 300;
	var step   = 2;

	var data_wanted = Math.floor(width / step);
	var data_fill   = 0;
	var data_stamp  = 0;

	var data_01  = [ ];
	var data_05  = [ ];
	var data_15 = [ ];

	var line_01;
	var line_05;
	var line_15;

	var label_25;
	var label_050;
	var label_75;

	var label_01_cur;
	var label_01_avg;
	var label_01_peak;

	var label_05_cur;
	var label_05_avg;
	var label_05_peak;

	var label_15_cur;
	var label_15_avg;
	var label_15_peak;

	var label_scale;


	/* wait for SVG */
	window.setTimeout(
		function() {
			var cpusvg = document.getElementById('cpusvg');

			try {
				G = cpusvg.getSVGDocument
					? cpusvg.getSVGDocument() : cpusvg.contentDocument;
			}
			catch(e) {
				G = document.embeds['cpusvg'].getSVGDocument();
			}

			if (!G)
			{
				window.setTimeout(arguments.callee, 1000);
			}
			else
			{
				/* find sizes */
				width       = cpusvg.offsetWidth  - 2;
				height      = cpusvg.offsetHeight - 2;
				data_wanted = Math.ceil(width / step);

				/* prefill datasets */
				for (var i = 0; i < data_wanted; i++)
				{
					data_01[i] = 0;
					data_05[i] = 0;
					data_15[i] = 0;
				}

				/* find svg elements */
				line_01 = G.getElementById('load01');

				label_25 = G.getElementById('label_25');
				label_50 = G.getElementById('label_50');
				label_75 = G.getElementById('label_75');

				label_scale   = document.getElementById('scale');

				/* plot horizontal time interval lines */
				for (var i = width % (step * 60); i < width; i += step * 60)
				{
					var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
						line.setAttribute('x1', i);
						line.setAttribute('y1', 0);
						line.setAttribute('x2', i);
						line.setAttribute('y2', '100%');
						line.setAttribute('style', 'stroke:black;stroke-width:0.1');

					var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
						text.setAttribute('x', i + 5);
						text.setAttribute('y', 15);
						text.setAttribute('style', 'fill:#eee; font-size:9pt; font-family:sans-serif; text-shadow:1px 1px 1px #000');
						text.appendChild(G.createTextNode(Math.round((width - i) / step / 60) + 'm'));

					label_25.parentNode.appendChild(line);
					label_25.parentNode.appendChild(text);
				}

				label_scale.innerHTML = String.format('<%:(%d minute window, %d second interval)%>', data_wanted / 60, 3);

        /* render datasets, start update interval */
        let re = /\/admin\/docker\/container\//
        let p = window.location.href
        let path = p.split(re)
        let container_id = path[1].split('/')[0] || path[1]
        let url = "/admin/docker/container/"+container_id+'/stats'
				XHR.poll(3, url, null,
					function(x, data)
					{
						var data_max   = 0;
						var data_scale = 0;

						var data_01_avg = 0;

						var data_01_peak = 0;

						for (var i = data_stamp ? 0 : 1; i < data.length; i++)
						{
							/* skip overlapping entries */
							if (data[i][TIME] <= data_stamp)
								continue;

							data_01.push(data[i][L01]);
						}

						/* cut off outdated entries */
						data_01 = data_01.slice(data_01.length - data_wanted, data_01.length);

						/* find peak */
						for (var i = 0; i < data_01.length; i++)
						{
							data_max = Math.max(data_max, data_01[i]);

							data_01_peak = Math.max(data_01_peak, data_01[i]);

							if (i > 0)
							{
								data_01_avg = (data_01_avg + data_01[i]) / 2;
							}
							else
							{
								data_01_avg = data_01[i];
							}
						}

						/* remember current timestamp, calculate horizontal scale */
						data_stamp = data[data.length-1][TIME];
						data_scale = height / (data_max * 1.1);


						/* plot data */
						var pt_01 = '0,' + height;

						var y_01 = 0;

						for (var i = 0; i < data_01.length; i++)
						{
							var x = i * step;

							y_01 = height - Math.floor(data_01[i] * data_scale);

							pt_01 += ' ' + x + ',' + y_01;
						}

						pt_01 += ' ' + width + ',' + y_01 + ' ' + width + ',' + height;


						line_01.setAttribute('points', pt_01);

						label_25.firstChild.data = (1.1 * 0.25 * data_max / 100).toFixed(2);
					}
				);

				XHR.run();
			}
		}, 1000
	);
//]]></script>

<h3 name="content"><%:CPU usage%></h2>
<embed id="cpusvg" style="width:100%; height:150px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/load.svg" />
<div style="text-align:right"><small id="scale">-</small></div>
<br />
<h3 name="content"><%:Memory usage%></h3>
<embed id="memsvg" style="width:100%; height:150px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/load.svg" />
<div style="text-align:right"><small id="scale">-</small></div>
<br />
<h3 name="content"><%:Network usage%></h3>
<embed id="netsvg" style="width:100%; height:150px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/load.svg" />
<div style="text-align:right"><small id="scale">-</small></div>
<%+footer%>
